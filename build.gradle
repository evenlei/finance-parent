buildscript {
    ext {
        springBootVersion = '2.2.13.RELEASE'
        springCloudVersion = 'Hoxton.SR9'
    }
    repositories {
        maven {
            url 'http://whrdd.f3322.net:8090/repository/maven-public/'
            credentials {
                username 'user-java'
                password 'HrelZ0CAalMh81nvOzTaGCDteKUWxc7D'
            }

        }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.24'
        classpath group: 'io.github.azagniotov', name: 'ant-style-path-matcher', version: '1.0.0'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.13.RELEASE")
    }
}

plugins {
//    id 'java' apply true
    id 'org.springframework.boot' version "2.2.13.RELEASE" apply false
//    id "com.gorylenko.gradle-git-properties" version "2.3.1-rc1" apply false
}

ext {
    druidVersion = "1.1.10"
    mysqlVersion = "5.1.47"
    mybatisPlusVersion = "3.1.0"
}

def javaLibrariesSuffix = [
        '-base',
        '-api',
        '-util'
]


subprojects { sub ->

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
//    apply plugin: "com.gorylenko.gradle-git-properties"

    if (javaLibrariesSuffix.any {
        sub.project.name.endsWith(it)
    }) {
        apply plugin: 'java-library'
    }

//    task setEnv {
//        doLast {
//            def middlewares = new File("${projectDir}/src/main/resources/middleware-deps.properties")
//            if (!middlewares.exists()) return
//            def middlewaresDeps = new Properties()
//            def profilesTxt;
//            try {
//                profilesTxt = new URL("https://gitlab.71djy.cn/zhaoxuan/common-config/-/raw/master/profiles").openStream().text
//            } catch (Exception ignore) {
//                profilesTxt = new File("${rootDir.getAbsolutePath()}/dangjian-saas-base/src/main/resources/profiles").text
//            }
//            def profiles = Arrays.asList(profilesTxt.split(","));
//            middlewares.withInputStream { middlewaresDeps.load(it) }
//            def f = new File("${project.buildDir}/SPRING_PROFILES_ACTIVE")
//            if (!f.exists()) f.mkdirs()
//            profiles.each { profile ->
//                def deps = middlewaresDeps.getProperty("deps", "")
//                        .split(",").findAll { !it.trim().isEmpty() }
//                        .collect { "$it" }.join(",")
//                def env = "$deps"
//                new File(f, profile).withPrintWriter { it << env }
//            }
//        }
//    }
//
//    bootJar.dependsOn setEnv

    group = 'com.monkey'
    version = '0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    //添加资源库
    repositories {
        maven {
            url "http://whrdd.f3322.net:8090/repository/maven-public/"
            credentials {
                username 'user-java'
                password 'HrelZ0CAalMh81nvOzTaGCDteKUWxc7D'
            }
        }
        maven { url "https://packages.confluent.io/maven/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "http://maven.aliyun.com/nexus/contnet/repositories/jcenter" }
        mavenLocal()
        mavenCentral()
    }

    jar {
        enabled = true
    }

//    gitProperties {
//        dateFormat = "yyyy-MM-dd'T'HH:mmZ"
//        dateFormatTimeZone = "CST"
//
//        dotGitDirectory = new File("${project.rootDir}", "../.git")
//    }

//    sourceSets {
//        main {
//            java { srcDir "src/main/java" }
//            resources {
//                srcDir 'src/main/resources'
//                exclude 'logback.xml'
//            }
//        }
//        test {
//            java { srcDir 'src/test/java' }
//            resources { srcDir 'src/test/resources' }
//        }
//    }
    //添加依赖
    dependencies {

        //spring boot framework
        compile('org.springframework.boot:spring-boot-starter-web')
        compile 'org.springframework.boot:spring-boot-starter-aop'
//        compile 'org.springframework.boot:spring-boot-devtools'
//        compile('org.springframework.boot:spring-boot-starter-data-redis')

        compile group: 'io.lettuce', name: 'lettuce-core', version: '5.3.6.RELEASE'
        //for data redis lettuce pool
//        compile 'org.apache.commons:commons-pool2:2.10.0'
        //spring cloud framework
        compile 'org.springframework.cloud:spring-cloud-starter-openfeign'

        compile 'de.siegmar:logback-gelf:3.0.0'
        compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.16'

        //third party util
        compile "com.google.guava:guava:30.1-jre"
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
        compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'
        compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile group: 'junit', name: 'junit', version: '4.12'

        implementation group: 'com.alibaba', name: 'easyexcel', version: '2.2.6'
        implementation group: 'org.apache.poi', name: 'poi', version: '3.17'
        compile group: 'net.sf.saxon', name: 'saxon-dom', version: '8.7'
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    publishing {

        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
            }
        }

        repositories {
            maven {
                def isSnapshot = version.toString().endsWith("SNAPSHOT")
                url = "http://whrdd.f3322.net:8090/repository/maven-${isSnapshot ? 'snapshots' : 'releases'}"
                credentials {
                    username 'admin'
                    password 'DdJan05H46CGtNmWnK2H6VgbsqCxyjMR'
                }
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

configure(subprojects.findAll { it.name.endsWith("-impl") || it.name.endsWith("project") }) {

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') {
//            exclude group: 'com.thoughtworks.xstream', module: 'xstream'
//        }
        implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
        implementation('com.thoughtworks.xstream:xstream:1.4.11.1')
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
        implementation group: 'com.alibaba', name: 'druid-spring-boot-starter', version: "$druidVersion"
        implementation group: 'com.baomidou', name: 'mybatis-plus-boot-starter', version: "$mybatisPlusVersion"
        runtime("mysql:mysql-connector-java:$mysqlVersion")
    }
}

configure(subprojects.findAll { it.name.endsWith("-wrap") }) {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') {
//            exclude group: 'com.thoughtworks.xstream', module: 'xstream'
//        }
        implementation('com.thoughtworks.xstream:xstream:1.4.11.1')
    }
}

configure(subprojects.findAll { it.name.endsWith("-impl") || it.name.endsWith("-wrap") || it.name.endsWith("-zuul") || it.name.endsWith("-registry") }) {
    dependencies {
//        implementation("org.springframework.cloud:spring-cloud-starter-config")
    }
}
